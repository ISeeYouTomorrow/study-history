1.查看mysql锁级别：
    SHOW VARIABLES like '%ISOLATION%';
2.mysql锁级别：
    读未提交(READ Uncommited)
    读已提交(Read Commited)
    可重复读(Repeatable read)[mysql-默认锁级别]
    串行化(Serizable)
3.mysql常用引擎
    InnoDB :支持事务，支持行级锁/表级锁
    Mysiam :不支持事务，表级锁
    CSV
    Memory:表级锁
4.共享锁/排他锁
    S  共享锁即读锁[行锁]，允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。
    X  排他锁即写锁[行锁]，允许获得排他锁的事务去更新数据，阻止其他事务获得相同数据集的读/写锁。
    IS 意向共享锁[表锁]：mysql内部使用 事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。
    IX 意向排他锁[表锁]：同上 事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。

    共享锁/排他锁都是行锁，针对Innodb引擎有效，意向锁都是表锁。
    InnoDB引擎会自动给update/delete/insert语句添加排他锁(X);
    对于普通select语句，Innodb不会加任何锁，事务可以通过语句显示给数据集添加共享锁或者排他锁。
    select 语句显示添加共享锁: select * from user where id = 1 lock in SHARE MODE;
    select 语句显示添加排他锁: select * from user where id = 1 for update;
    注意：对于锁定行记录后需要进行更新操作的应用，应该使用Select...For update 方式，获取排它锁。（用共享锁，在读了之后再写会阻塞，会导致死锁）

    Myisam在执行查询语句前，会自动给涉及的所有表加上读锁，在执行更新操作哦前自动给涉及的表加写锁。
    InnoDB行锁是通过给索引上的索引项添加锁来实现的，因此：只有通过索引条件检索数据，Innodb才使用行锁，否则，Innodb将使用表锁。

5.乐观锁/悲观锁：
    悲观锁：对数据被外界修改持保守态度，在整个数据处理过程中，将数据处于锁定状态。
    1)使用悲观锁，必须关闭mysql数据库的自动提交属性，采用手动提交事务的方式；因为mysql默认使用autocommit模式，即当有更新操作时，mysql会自动提交结果。
    2)事务在select .. for update / lock in share mode 只有操作同一批次的数据时才会等待其他事务结束，一般select不受此影响，对于update/delete/insert语句，innodb会自动给涉及的数据集添加排他锁X。
    3）innodb只有在明确指定主键或者索引的数据集操作时才会执行行锁，否则仍然会执行表锁。

    乐观锁：认为数据一般情况下不会被修改导致冲突，在数据进行提交更新的时候，对数据冲突与否进行检测，如果发现冲突，则返回错误提示，让用户决定如何去做，例如事务回滚。
    1）乐观锁使用数据库版本（version）记录机制实现。
    2）乐观锁使用时间戳（timestamp），原理同上。
    总结：两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。
　　 另外，高并发情况下个人认为乐观锁要好于悲观锁，因为悲观锁的机制使得各个线程等待时间过长，极其影响效率，乐观锁可以在一定程度上提高并发度。

