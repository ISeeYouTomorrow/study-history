1.JDK动态代理核心类:
    java.lang.reflect.Proxy //动态代理类(生成动态代理类的父类)
    java.lang.reflect.InvocationHandler //动态代理类的属性-使用代理产生代理类实例调用处理程序的实现接口

    代码示例:
    1)定义被代理类接口/实现类（即被代理对象类）
        public interface Fly {
            void fly();
        }

        public class Bird implements Fly {
            @Override
            public void fly(){
                System.out.println("fly with swing");
            }
        }

    2)定义动态代理实例处理程序类
        public class FlyProxy implements InvocationHandler {
                /**
                 * 被代理对象
                 */
                private Fly fly;

                public BirdProxy(Fly fly) {
                    this.fly = fly;
                }

                /**
                 * 获取代理对象
                 * @return
                 */
                public <T> T getProxy() {
                    return (T)Proxy.newProxyInstance(getClass().getClassLoader(), new Class[]{Fly.class},this);
                }

                //proxy ---- 即动态代理类实例对象，该类继承Proxy，实现了Fly接口，并且重写了Fly接口的方法。
                @Override
                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                    System.out.println("飞之前需要做的事情");
                    Object result = method.invoke(fly, args);
                    System.out.println("飞之后需要做的事情");

                    return result;
                }
        }
    3)测试:
        public static void main(String[] args) {
            //保留生成的动态代理类$Proxy0.class
            System.getProperties().put("sun.misc.ProxyGenerator.saveGeneratedFiles", "true");
            Fly fly = new Bird();
            BirdProxy proxy = new BirdProxy(fly);
            Fly proxyFly = proxy.getProxy();
            proxyFly.fly();

        }
    4)查看生成的动态代理类(字节码反编译)：
    可以看到main方法中proxyFly对象是$Proxy0类的实例对象，该实例继承了Proxy，实现了Fly接口，因为java不支持多继承，JDK动态代理必须通过接口实现，所以JDK动态代理是接口代理。
    proxyFly.fly()方法调用的正式动态代理类的fly方法，也就是调用了InvocationHandler的invock方法。

    package com.sun.proxy;

    import com.study.lxl.springboot.task.proxy.Fly;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Method;
    import java.lang.reflect.Proxy;
    import java.lang.reflect.UndeclaredThrowableException;

    public final class $Proxy0 extends Proxy implements Fly {
        private static Method m1;
        private static Method m3;
        private static Method m4;
        private static Method m2;
        private static Method m0;

        public $Proxy0(InvocationHandler var1) throws  {
            super(var1);
        }

        public final boolean equals(Object var1) throws  {
            try {
                return (Boolean)super.h.invoke(this, m1, new Object[]{var1});
            } catch (RuntimeException | Error var3) {
                throw var3;
            } catch (Throwable var4) {
                throw new UndeclaredThrowableException(var4);
            }
        }

        public final void run() throws  {
            try {
                super.h.invoke(this, m3, (Object[])null);
            } catch (RuntimeException | Error var2) {
                throw var2;
            } catch (Throwable var3) {
                throw new UndeclaredThrowableException(var3);
            }
        }

        public final void fly() throws  {
            try {
                super.h.invoke(this, m4, (Object[])null);
            } catch (RuntimeException | Error var2) {
                throw var2;
            } catch (Throwable var3) {
                throw new UndeclaredThrowableException(var3);
            }
        }

        public final String toString() throws  {
            try {
                return (String)super.h.invoke(this, m2, (Object[])null);
            } catch (RuntimeException | Error var2) {
                throw var2;
            } catch (Throwable var3) {
                throw new UndeclaredThrowableException(var3);
            }
        }

        public final int hashCode() throws  {
            try {
                return (Integer)super.h.invoke(this, m0, (Object[])null);
            } catch (RuntimeException | Error var2) {
                throw var2;
            } catch (Throwable var3) {
                throw new UndeclaredThrowableException(var3);
            }
        }

        static {
            try {
                m1 = Class.forName("java.lang.Object").getMethod("equals", Class.forName("java.lang.Object"));
                m3 = Class.forName("com.study.lxl.springboot.task.proxy.Fly").getMethod("run");
                m4 = Class.forName("com.study.lxl.springboot.task.proxy.Fly").getMethod("fly");
                m2 = Class.forName("java.lang.Object").getMethod("toString");
                m0 = Class.forName("java.lang.Object").getMethod("hashCode");
            } catch (NoSuchMethodException var2) {
                throw new NoSuchMethodError(var2.getMessage());
            } catch (ClassNotFoundException var3) {
                throw new NoClassDefFoundError(var3.getMessage());
            }
        }
    }
